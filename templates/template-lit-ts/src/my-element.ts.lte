import { LitElement, css, html } from "lit";
import { customElement, property, state } from "lit/decorators.js";

import litLogo from "./assets/lit.svg";
import viteLogo from "/vite.svg";

import { invoke } from "@tauri-apps/api/{% if v2 %}core{% else %}tauri{% endif %}";

/**
 * An example element.
 *
 * @slot - This element has a slot
 * @csspart button - The button
 */
@customElement("my-element")
export class MyElement extends LitElement {
  /**
   * Copy for the read the docs hint.
   */
  @property()
  docsHint = "Click on the Tauri, Vite, and Lit logos to learn more.";

  @state()
  greetMsg = "";

  name = "";

  render() {
    return html`
        <slot></slot>
        <div class="row">
          <a href="https://vite.dev" target="_blank">
            <img src=${viteLogo} class="logo" alt="Vite logo" />
          </a>
          <a href="https://tauri.app" target="_blank">
            <img src="/tauri.svg" class="logo tauri" alt="Tauri logo" />
          </a>
          <a href="https://lit.dev" target="_blank">
            <img src=${litLogo} class="logo lit" alt="Lit logo" />
          </a>
        </div>
        <p class="read-the-docs">${this.docsHint}</p>

        <form classe="row" @submit="${this._greet}">
          <input
            id="greet-input"
            type="text"
            @change="${(e: Event) =>
              (this.name = (e.target as HTMLInputElement).value)}"
            placeholder="Enter a name..."
          />
          <button type="submit">Greet</button>
        </form>
        <p>${this.greetMsg}</p>
    `;
  }

  private _greet(e: Event) {
    e.preventDefault();
    invoke("greet", { name: this.name }).then((msg) => {
      this.greetMsg = msg as string;
    });
  }

  static styles = css`
    :host {
      max-width: 1280px;
      margin: 0 auto;
      padding: 2rem;
      text-align: center;
    }

    .logo {
      height: 6em;
      padding: 1.5em;
      will-change: filter;
      transition: filter 300ms;
    }
    .logo:hover {
      filter: drop-shadow(0 0 2em #646cffaa);
    }
    .logo.lit:hover {
      filter: drop-shadow(0 0 2em #325cffaa);
    }

    .card {
      padding: 2em;
    }

    .read-the-docs {
      color: #888;
    }

    ::slotted(h1) {
      font-size: 3.2em;
      line-height: 1.1;
    }

    a {
      font-weight: 500;
      color: #646cff;
      text-decoration: inherit;
    }
    a:hover {
      color: #535bf2;
    }

    input,
    button {
      border-radius: 8px;
      border: 1px solid transparent;
      padding: 0.6em 1.2em;
      font-size: 1em;
      font-weight: 500;
      font-family: inherit;
      color: #0f0f0f;
      background-color: #ffffff;
      transition: border-color 0.25s;
      box-shadow: 0 2px 2px rgba(0, 0, 0, 0.2);
    }

    button {
      cursor: pointer;
    }

    button:hover {
      border-color: #396cd8;
    }
    button:active {
      border-color: #396cd8;
      background-color: #e8e8e8;
    }

    input,
    button {
      outline: none;
    }

    #greet-input {
      margin-right: 5px;
    }

    @media (prefers-color-scheme: dark) {
      :root {
        color: #f6f6f6;
        background-color: #2f2f2f;
      }

      a:hover {
        color: #24c8db;
      }

      input,
      button {
        color: #ffffff;
        background-color: #0f0f0f98;
      }
      button:active {
        background-color: #0f0f0f69;
      }
    }
  `;
}

declare global {
  interface HTMLElementTagNameMap {
    "my-element": MyElement;
  }
}